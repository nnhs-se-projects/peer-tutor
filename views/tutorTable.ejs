<%- include('include/_header') %> <%- include('include/_teachNavBar') %>

<!-- Main Site -->
<main>
  <h1 class="heading">Tutor Database Table</h1>
  <div class="createEntry-form-box">
    <table id="studentTable" class="bordered-table">
      <thead>
        <tr>
          <% const headers = ['Tutor Name', 'Tutor Grade', 'Tutor ID',
          'Classes', 'Days', 'Lunch', 'Total Sessions']; %> <%
          headers.forEach((header, index) => { %>
          <th>
            <div
              class="header-container"
              style="
                display: flex;
                justify-content: space-between;
                align-items: center;
              "
            >
              <span class="header-text" id="headerText<%= index %>"
                ><%= header %></span
              >
              <div class="icons" style="display: flex; gap: 5px">
                <span
                  class="sort-icon"
                  id="sortIcon<%= index %>"
                  onclick="sortTable(<%= index %>)"
                  >‚Üë‚Üì</span
                >
                <span class="search-icon" onclick="toggleSearch(<%= index %>)"
                  >üîç</span
                >
              </div>
            </div>
            <input
              type="text"
              class="search-input"
              id="searchInput<%= index %>"
              placeholder="Search <%= header %>"
              oninput="filterTable(<%= index %>)"
              style="display: none; width: 100%"
            />
          </th>
          <% }) %>
        </tr>
      </thead>
      <tbody>
        <% entries.forEach(entry => { %>
        <tr>
          <td><%= entry.tutorName %></td>
          <td><%= entry.tutorGrade %></td>
          <td><%= entry.tutorID %></td>
          <td>
            <%= entry.classesCanTeach ? entry.classesCanTeach.join(', ') : '' %>
          </td>
          <td>
            <%= entry.daysCanTeach ? entry.daysCanTeach.join(', ') : '' %>
          </td>
          <td><%= entry.lunchPeriod %></td>
          <td><%= entry.totalSessions %></td>
        </tr>
        <% }) %>
      </tbody>
    </table>
  </div>
</main>

<%- include('include/_footer') %>

<script>
  function toggleSearch(column) {
    const headerText = document.getElementById(`headerText${column}`);
    const searchInput = document.getElementById(`searchInput${column}`);
    const icons = headerText.nextElementSibling;

    // Calculate the width of the header and apply it to the search input
    const headerHeight = headerText.offsetHeight + 5;
    const headerWidth = headerText.offsetWidth + icons.offsetWidth + 100;

    if (
      searchInput.style.display === "none" ||
      searchInput.style.display === ""
    ) {
      headerText.style.display = "none";
      searchInput.style.display = "inline-block";
      searchInput.style.height = `${headerHeight}px`;
      searchInput.style.width = `${headerWidth}px`;

      icons.style.display = "none";
      searchInput.focus();
    } else {
      if (searchInput.value === "") {
        headerText.style.display = "block";
        searchInput.style.display = "none";
        icons.style.display = "flex";
      }
    }
  }

  document.addEventListener("click", function (event) {
    document.querySelectorAll(".search-input").forEach((input, index) => {
      if (
        !input.contains(event.target) &&
        !document
          .querySelector(`.search-icon[onclick='toggleSearch(${index})']`)
          .contains(event.target)
      ) {
        if (input.value === "") {
          input.style.display = "none";
          document.getElementById(`headerText${index}`).style.display = "block";
          document.getElementById(
            `headerText${index}`
          ).nextElementSibling.style.display = "flex";
        }
      }
    });
  });

  function filterTable(column) {
    const input = document
      .getElementById(`searchInput${column}`)
      .value.toLowerCase();
    const table = document.getElementById("studentTable");
    const rows = table.getElementsByTagName("tr");

    for (let i = 1; i < rows.length; i++) {
      const cells = rows[i].getElementsByTagName("td");
      if (cells[column]) {
        const cellText = cells[column].textContent || cells[column].innerText;
        rows[i].style.display = cellText.toLowerCase().includes(input)
          ? ""
          : "none";
      }
    }
  }

  let currentSort = { columnIndex: null, isDescending: false };

  function sortTable(column) {
    const table = document.getElementById("studentTable");
    let rows = Array.from(table.getElementsByTagName("tr")).slice(1);
    const isNumeric = column === 6 || column === 2;

    const reverse =
      currentSort.columnIndex === column ? !currentSort.isDescending : false;
    rows.sort((rowA, rowB) => {
      let cellA = rowA.getElementsByTagName("td")[column].textContent.trim();
      let cellB = rowB.getElementsByTagName("td")[column].textContent.trim();

      if (isNumeric) {
        return reverse ? cellB - cellA : cellA - cellB;
      } else {
        return reverse
          ? cellB.localeCompare(cellA)
          : cellA.localeCompare(cellB);
      }
    });

    rows.forEach((row) => table.appendChild(row));

    currentSort = { columnIndex: column, isDescending: reverse };
    updateSortIcons(column, reverse);
  }

  function updateSortIcons(column, isDescending) {
    document.querySelectorAll(".sort-icon").forEach((icon) => {
      icon.textContent = "‚Üë‚Üì";
    });

    const icon = document.getElementById(`sortIcon${column}`);
    icon.textContent = isDescending ? "‚Üì" : "‚Üë";
  }
</script>
